---

services:
  # ClickHouse - единая база данных для всех данных
  clickhouse:
    image: clickhouse/clickhouse-server:25.9
    container_name: monitoring-clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native protocol
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      CLICKHOUSE_DB: monitoring
      CLICKHOUSE_USER: monitor_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-change_me_in_production}
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 5s
      timeout: 3s
      retries: 10

  # MinIO - S3-совместимое хранилище для скриншотов и USB копий
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: monitoring-minio
    ports:
      - "9100:9000"  # API
      - "9101:9001"  # Console
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-change_me_in_production}
    command: server /data --console-address ":9001"
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 10

  # MinIO Client - для создания buckets при запуске
  minio-init:
    image: minio/mc:RELEASE.2025-08-13T08-35-41Z
    container_name: monitoring-minio-init
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - monitoring-network
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-change_me_in_production};
      mc mb myminio/screenshots --ignore-existing;
      mc mb myminio/usb-copies --ignore-existing;
      mc policy set download myminio/screenshots;
      mc ilm add myminio/screenshots --expiry-days 180;
      echo 'MinIO buckets created successfully';
      exit 0;
      "

  # Monitoring Server (Go application)
  server:
    build:
      context: ./
      dockerfile: ./server/Dockerfile
    container_name: monitoring-server
    ports:
      - "8081:8080"
    volumes:
      - ./server/config.yaml:/app/config.yaml
      - ./server/logs:/app/logs
    environment:
      - CONFIG_PATH=/app/config.yaml
      - CLICKHOUSE_HOST=clickhouse
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - monitoring-network
    restart: unless-stopped

  # Frontend (React application)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=/api
    container_name: monitoring-frontend
    depends_on:
      - server
    networks:
      - monitoring-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: monitoring-nginx
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - server
      - frontend
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  monitoring-network:
    driver: bridge

volumes:
  clickhouse_data:
    driver: local
  minio_data:
    driver: local
...